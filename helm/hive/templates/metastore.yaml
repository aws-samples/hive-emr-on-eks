{{ if .Values.create.metastore -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  #namespace: hivemr3
  name: hivemr3-metastore
spec:
  serviceName: metastore
  replicas: 1
  selector:
    matchLabels:
      hivemr3_hive_source: hivesrc3
      hivemr3_app: metastore
  template:
    metadata:
      #namespace: hivemr3
      name: hivemr3-metastore
      labels:
        hivemr3_hive_source: hivesrc3
        hivemr3_app: metastore
        mr3-pod-role: master-role
    spec:
      serviceAccountName: {{ .Values.name.hive.serviceAccount }}
      restartPolicy: Always
      # affinity:
        # nodeAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #     nodeSelectorTerms:
        #     - matchExpressions:
        #       - key: roles
        #         operator: In
        #         values:
        #         - "masters"
        # podAffinity:
        #   preferredDuringSchedulingIgnoredDuringExecution:
        #   - weight: 100
        #     podAffinityTerm:
        #       topologyKey: kubernetes.io/hostname
        #       labelSelector:
        #         matchLabels:
        #           hivemr3_app: ranger
      hostAliases:
      {{- range .Values.hostAliases }}
      - ip: {{ .ip }}
        hostnames: 
        {{- range .hostnames }}
        - {{ . }}
        {{- end }}
      {{- end }}
      {{- if .Values.docker.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.docker.imagePullSecrets }}
      {{- end }}
      containers:
      - image: {{ .Values.docker.image }}
        command: ["/opt/mr3-run/hive/metastore-service.sh"]
        args: ["start"{{ if .Values.metastore.initSchema }}, "--init-schema"
          {{- end }}, "--{{ .Values.hive.amMode }}"]
        imagePullPolicy: {{ .Values.docker.imagePullPolicy }}
        name: metastore
        env:
        - name: CLIENT_TO_AM_TOKEN_KEY
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.name.amConfigMap }}
              key: key
        - name: MR3_APPLICATION_ID_TIMESTAMP
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.name.amConfigMap }}
              key: timestamp
        - name: MR3_SHARED_SESSION_ID
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.name.amConfigMap }}
              key: mr3sessionid
        - name: ATS_SECRET_KEY
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.name.amConfigMap }}
              key: ats-secret-key
        resources:
          requests:
            cpu: {{ .Values.metastore.resources.requests.cpu }}
            memory: {{ .Values.metastore.resources.requests.memory }}
          limits:
            cpu: {{ .Values.metastore.resources.limits.cpu }}
            memory: {{ .Values.metastore.resources.limits.memory }}
        ports:
        - containerPort: {{ .Values.metastore.port }}
          protocol: TCP
        # uncomment to use readiness/liveness probes
        # readinessProbe:
        #   tcpSocket:
        #     port: {{ .Values.metastore.port }}
        #   initialDelaySeconds: 30
        #   periodSeconds: 60
        # livenessProbe:
        #   tcpSocket:
        #     port: {{ .Values.metastore.port }}
        #   initialDelaySeconds: 30
        #   periodSeconds: 60
        volumeMounts:
        - name: env-k8s-volume
          mountPath: {{ .Values.dir.base }}/env.sh
          subPath: env.sh
        - name: env-secret-k8s-volume
          mountPath: {{ .Values.dir.base }}/env-secret.sh
          subPath: env-secret.sh
        - name: conf-k8s-volume
          mountPath: {{ .Values.dir.conf }}
          readOnly: true
        - name: key-k8s-volume
          mountPath: {{ .Values.dir.keytab }}
          readOnly: true
        {{- if .Values.workDir.create }}
        - name: work-dir-volume
          mountPath: {{ .Values.dir.persistentVolumeClaim }}
        {{- end }}
        {{- if .Values.metastore.mountLib }}
        - name: work-dir-volume
          mountPath: {{ .Values.dir.base }}/lib
          subPath: lib
        {{- end }}
        {{- if .Values.metastore.hostLib }}
        - name: host-lib-volume
          mountPath: {{ .Values.dir.base }}/host-lib
        {{- end }}
      volumes:
      - name: env-k8s-volume
        configMap:
          name: {{ .Values.name.envConfigMap }}
      - name: env-secret-k8s-volume
        secret:
          secretName: {{ .Values.name.envSecret }}
      - name: conf-k8s-volume
        configMap:
          name: {{ .Values.name.hive.configMap }}
      - name: key-k8s-volume
        secret:
          secretName: {{ .Values.name.hive.secret }}
      {{- if .Values.workDir.create }}
      - name: work-dir-volume
        persistentVolumeClaim:
          claimName: {{ .Values.name.persistentVolumeClaim }}
      {{- end }}
      {{- if .Values.metastore.hostLib }}
      - name: host-lib-volume
        hostPath:
          path: {{ .Values.metastore.hostLibDir }}
          type: Directory
      {{- end }}
{{ end }}
