<configuration>

<property>
  <name>dfs.client.mmap.enabled</name>
  <value>false</value>
</property>

<property>
  <name>dfs.short.circuit.shared.memory.watcher.interrupt.check.ms</name>
  <value>0</value>
</property>

<property>
  <name>hive.auto.convert.sortmerge.join.to.mapjoin</name>
  <value>true</value>
</property>

<property>
  <name>hive.compactor.initiator.on</name>
  <value>false</value>
</property>

<property>
  <name>hive.compactor.worker.threads</name>
  <value>1</value>
</property>

<property>
  <name>hive.default.fileformat.managed</name>
  <value>TextFile</value>
</property>

<property>
  <name>hive.driver.parallel.compilation</name>
  <value>true</value>
</property>

<property>
  <name>hive.enforce.sortmergebucketmapjoin</name>
  <value>true</value>
</property>

<property>
  <name>hive.exec.dynamic.partition.mode</name>
  <value>nonstrict</value>
</property>

<property>
  <name>hive.exec.max.dynamic.partitions</name>
  <value>5000</value>
</property>

<property>
  <name>hive.exec.max.dynamic.partitions.pernode</name>
  <value>2000</value>
</property>

<property>
  <name>hive.exec.orc.compression.strategy</name>
  <value>SPEED</value>
</property>

<property>
  <name>hive.exec.orc.default.compress</name>
  <value>SNAPPY</value>
</property>

<property>
  <name>hive.exec.orc.default.stripe.size</name>
  <value>67108864</value>
</property>

<property>
  <name>hive.exec.orc.encoding.strategy</name>
  <value>SPEED</value>
</property>

<property>
  <name>hive.exec.orc.split.strategy</name>
  <value>HYBRID</value>
</property>

<property>
  <name>hive.exec.reducers.bytes.per.reducer</name>
  <value>67108864</value>
</property>

<property>
  <name>hive.exec.reducers.max</name>
  <value>1009</value>
</property>

<property>
  <name>hive.limit.optimize.enable</name>
  <value>true</value>
</property>

<property>
  <name>hive.limit.pushdown.memory.usage</name>
  <value>0.04</value>
</property>

<property>
  <name>hive.map.aggr.hash.min.reduction</name>
  <value>0.99</value>
</property>

<property>
  <name>hive.mapjoin.bucket.cache.size</name>
  <value>10000</value>
</property>

<property>
  <name>hive.mapjoin.hybridgrace.hashtable</name>
  <value>false</value>
</property>

<property>
  <name>hive.merge.nway.joins</name>
  <value>true</value>
  <description>
    Set it to false if necessary. Cf. HIVE-21189
  </description>
</property>

<property>
  <name>hive.metastore.cache.pinobjtypes</name>
  <value>Table,Database,Type,FieldSchema,Order</value>
</property>

<property>
  <name>hive.metastore.client.connect.retry.delay</name>
  <value>5s</value>
</property>

<property>
  <name>hive.metastore.connect.retries</name>
  <value>24</value>
</property>

<property>
  <name>hive.metastore.event.listeners</name>
  <value>org.apache.hive.hcatalog.listener.DbNotificationListener</value>
</property>

<property>
  <name>hive.metastore.failure.retries</name>
  <value>24</value>
</property>

<!--
  see HiveServer2.startPrivilegeSynchronizer() to learn when HiveServer2 creates ZooKeeperClient
 -->
<property>
  <name>hive.metastore.pre.event.listeners</name>
  <value></value>
</property>
<property>
  <name>metastore.pre.event.listeners</name>
  <value></value>
</property>

<property>
  <name>hive.metastore.server.max.threads</name>
  <value>100000</value>
</property>

<property>
  <name>metastore.stats.fetch.bitvector</name>
  <value>true</value>
</property>

<property>
  <name>hive.optimize.bucketmapjoin</name>
  <value>true</value>
</property>

<property>
  <name>hive.optimize.bucketmapjoin.sortedmerge</name>
  <value>true</value>
</property>

<property>
  <name>hive.optimize.index.filter</name>
  <value>true</value>
</property>

<property>
  <name>hive.optimize.metadataonly</name>
  <value>true</value>
</property>

<property>
  <name>hive.server2.max.start.attempts</name>
  <value>5</value>
</property>

<property>
  <name>hive.server2.transport.mode</name>
  <value>all</value>
</property>

<property>
  <name>hive.server2.keystore.path</name>
  <value>/opt/mr3-run/key/hivemr3-ssl-certificate.jks</value>
</property>

<property>
  <name>hive.server2.keystore.password</name>
  <value>_</value>
</property>

<property>
  <name>hive.metastore.use.SSL</name>
  <value>false</value>
</property>

<property>
  <name>hive.metastore.keystore.path</name>
  <value>/opt/mr3-run/key/hivemr3-ssl-certificate.jks</value>
</property>

<property>
  <name>hive.metastore.truststore.path</name>
  <value>/opt/mr3-run/key/hivemr3-ssl-certificate.jks</value>
</property>

<property>
  <name>hive.server2.webui.port</name>
  <value>0</value>
</property>

<property>
  <name>hive.stats.autogather</name>
  <value>true</value>
  <description>
    By default, Hive collects stats when running operations like alter table partition and create table.
    However, collecting stats requires Metastore to list all files under the table directory, which can be expensive on S3.
    Cf. HIVE-20246 and tblproperties('DO_NOT_UPDATE_STATS'='TRUE')
  </description>
</property>

<property>
  <name>hive.stats.fetch.column.stats</name>
  <value>true</value>
</property>

<property>
  <name>hive.support.concurrency</name>
  <value>true</value>
</property>

<property>
  <name>hive.tez.auto.reducer.parallelism</name>
  <value>true</value>
</property>

<property>
  <name>hive.tez.bucket.pruning</name>
  <value>true</value>
</property>

<property>
  <name>hive.txn.manager</name>
  <value>org.apache.hadoop.hive.ql.lockmgr.DbTxnManager</value>
</property>

<property>
  <name>hive.user.install.directory</name>
  <value>/user/</value>
</property>

<property>
  <name>hive.vectorized.execution.mapjoin.minmax.enabled</name>
  <value>true</value>
</property>

<property>
  <name>hive.vectorized.execution.mapjoin.native.fast.hashtable.enabled</name>
  <value>true</value>
</property>

<property>
  <name>hive.vectorized.groupby.checkinterval</name>
  <value>4096</value>
</property>

<property>
  <name>hive.vectorized.adaptor.usage.mode</name>
  <value>all</value>
  <description>
    Set to chosen for stability or to avoid vectorizing UDFs that do not have native vectorized versions available. Cf. HIVE-21935
  </description>
</property>

<!-- Security -->

<property>
  <name>hive.security.authorization.enabled</name>
  <value>true</value>
</property>

<property>
  <name>hive.security.authenticator.manager</name>
  <!-- <value>org.apache.hadoop.hive.ql.security.HadoopDefaultAuthenticator</value> -->
  <!-- <value>org.apache.hadoop.hive.ql.security.ProxyUserAuthenticator</value> -->
  <value>org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator</value>
</property>

<property>
  <name>hive.security.authorization.manager</name>
  <!-- <value>org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdConfOnlyAuthorizerFactory</value> -->
  <value>org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory</value>
  <!-- <value>org.apache.ranger.authorization.hive.authorizer.RangerHiveAuthorizerFactory</value> -->
</property>

<!-- set to false in order not to create ZooKeeperClient in HiveServer2
  With Ranger:
    RangerHiveAuthorizerBase.getHivePolicyProvider() returns RangerHivePolicyProvider.
    Hence we should explicitly set hive.privilege.synchronizer to false.
 -->
<property>
  <name>hive.privilege.synchronizer</name>
  <value>false</value>
</property>

<property>
  <name>hive.security.metastore.authenticator.manager</name>
  <value>org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator</value>
</property>

<property>
  <name>hive.security.metastore.authorization.auth.reads</name>
  <value>true</value>
</property>

<property>
  <name>hive.security.metastore.authorization.manager</name>
  <value>org.apache.hadoop.hive.ql.security.authorization.DefaultHiveMetastoreAuthorizationProvider</value>
  <!-- if enabled, a ZooKeeper client starts, so hive.zookeeper.quorum should be set properly -->
  <!-- <value>org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider</value> -->
</property>

<property>
  <name>hive.server2.enable.doAs</name>
  <value>false</value>
</property>

<property> 
  <name>hive.security.authorization.sqlstd.confwhitelist.append</name>
  <value>hive\.querylog\.location.*|hive\.mr3\.map\.task.*|hive\.mr3\.reduce\.task.*</value>
</property>

<!-- Metastore -->

<property>
  <name>hive.metastore.db.type</name>
  <value>MYSQL</value>
</property>

<!-- set to com.mysql.jdbc.Driver if necessary -->
<property>
  <name>javax.jdo.option.ConnectionDriverName</name>
  <value>com.mysql.cj.jdbc.Driver</value>
</property>

<property>
  <name>javax.jdo.option.ConnectionURL</name>
  <value>jdbc:mysql://${hive.database.host}/${hive.database.name}?createDatabaseIfNotExist=true&amp;useSSL=false</value>
  <!-- <value>jdbc:mysql://${hive.database.host}/${hive.database.name}?createDatabaseIfNotExist=true&amp;useSSL=true&amp;verifyServerCertificate=true</value> -->
</property>

<property>
  <name>javax.jdo.option.ConnectionUserName</name>
  <value>admin</value>
</property>

<property>
  <name>javax.jdo.option.ConnectionPassword</name>
  <value>6Kyh|kDPBM-Ojs)-m_6htm]%nm1S</value>
</property>

<property>
  <name>hive.metastore.kerberos.keytab.file</name>
  <value>${hive.metastore.keytab.file}</value>
</property>

<property>
  <name>hive.metastore.kerberos.principal</name>
  <value>${hive.metastore.principal}</value>
</property>

<property>
  <name>hive.metastore.sasl.enabled</name>
  <value>${hive.metastore.secure.mode}</value>
</property>

<property>
  <name>hive.metastore.uris</name>
  <value>thrift://${hive.metastore.host}:${hive.metastore.port}</value>
</property>

<property>
  <name>hive.metastore.warehouse.dir</name>
  <value>${hive.warehouse.dir}</value>
</property>

<property>
  <name>hive.metastore.event.db.notification.api.auth</name>
  <value>false</value>
</property>

<property>
  <name>metastore.metastore.event.db.notification.api.auth</name>
  <value>false</value>
</property>

<!-- HiveServer2 -->

<property>
  <name>hive.users.in.admin.role</name>
  <value>root,hive</value>
</property>

<property>
  <name>hive.server2.authentication</name>
  <value>${hive.server2.authentication.mode}</value>
</property>

<property>
  <name>hive.server2.authentication.kerberos.keytab</name>
  <value>${hive.server2.keytab.file}</value>
</property>

<property>
  <name>hive.server2.authentication.kerberos.principal</name>
  <value>${hive.server2.principal}</value>
</property>

<property>
  <name>hive.server2.thrift.http.port</name>
  <value>${hive.server2.http.port}</value>
</property>

<property>
  <name>hive.server2.thrift.bind.host</name>
  <value>${hive.server2.host}</value>
</property>

<property>
  <name>hive.server2.thrift.port</name>
  <value>${hive.server2.port}</value>
</property>

<property>
  <name>hive.server2.use.SSL</name>
  <value>false</value>
</property>

<property>
  <name>hive.server2.thrift.sasl.qop</name>
  <value>auth-conf</value>
</property>

<!-- Hive (configurable) -->

<property>
  <name>hive.auto.convert.join.noconditionaltask.size</name>
  <value>4000000000</value>
</property>
    
<property>
  <name>hive.optimize.dynamic.partition.hashjoin</name>
  <value>true</value>
</property>

<property>
  <name>metastore.aggregate.stats.cache.enabled</name>
  <value>true</value>
</property>

<property>
  <name>hive.metastore.aggregate.stats.cache.enabled</name>
  <value>true</value>
</property>

<property>
  <name>hive.query.reexecution.stats.persist.scope</name>
  <value>query</value>
</property>

<property>
  <name>hive.query.results.cache.enabled</name>
  <value>true</value>
</property>

<property>
  <name>hive.server2.idle.operation.timeout</name>
  <value>4h</value>
</property>

<property>
  <name>hive.server2.idle.session.timeout</name>
  <value>4h</value>
</property>

<!-- MR3 LLAP (configurable) -->

<property>
  <name>hive.llap.io.enabled</name>
  <value>false</value>
</property>

<property>
  <name>hive.llap.io.allocator.mmap</name>
  <value>false</value>
</property>

<!-- use /ephemeral1/llapio on AWS EKS -->
<property>
  <name>hive.llap.io.allocator.mmap.path</name>
  <value>/data1/llap</value>
</property>

<property>
  <name>hive.llap.io.memory.size</name>
  <value>72Gb</value>
</property>

<property>
  <name>hive.mr3.llap.headroom.mb</name>
  <value>8192</value>
</property>

<property>
  <name>hive.llap.io.threadpool.size</name>
  <value>10</value>
  <description> 
    hive.llap.io.threadpool.size must be >= # of TaskAttempts running in a ContainerWorker (and hive.llap.daemon.num.executors).
    Cf. HIVE-24626
  </description>
</property>
    
<property>
  <name>hive.llap.daemon.num.executors</name>
  <value>10</value>
  <description> 
    Used as an estimate number of Reducers in LlapDecider when no ContainerWorkers are running
  </description>
</property>

<!-- MR3 LLAP (fixed) -->

<property>
  <name>hive.execution.engine</name>
  <value>tez</value>
</property>

<property>
  <name>hive.execution.mode</name>
  <value>llap</value>
</property>

<property>
  <name>hive.mr3.container.use.per.query.cache</name>
  <value>true</value>
</property>

<property>
  <name>hive.llap.hs2.coordinator.enabled</name>
  <value>false</value>
</property>

<property>
  <name>hive.llap.daemon.service.hosts</name>
  <value></value>
</property>

<property>
  <name>hive.strict.checks.cartesian.product</name>
  <value>false</value>
</property>

<property>
  <name>hive.server2.support.dynamic.service.discovery</name>
  <value>false</value>
</property>

<property>
  <name>hive.llap.execution.mode</name>
  <value>all</value>
</property>
    
<property>
  <name>hive.aux.jars.path</name>
  <value></value>
</property>

<!-- set to false when not using HDFS -->
<property>
  <name>hive.resource.use.hdfs.location</name>
  <value>false</value>
  <description>
    Can be set to false if no additional resources are added (other than hive.aux.jars.path)
  </description>
</property>
    
<!-- MR3 -->

<property>
  <name>hive.mr3.exec.print.summary</name>
  <value>true</value>
</property>

<!-- to use individual session mode, do not pass MR3_APPLICATION_ID_TIMESTAMP to HiveServer2 -->
<property>
  <name>hive.server2.mr3.share.session</name>
  <value>true</value>
</property>

<property>
  <name>hive.mr3.container.combine.taskattempts</name>
  <value>true</value>
</property>

<property>
  <name>hive.mr3.container.reuse</name>
  <value>true</value>
</property>

<property>
  <name>hive.mr3.containergroup.scheme</name>
  <value>all-in-one</value>
</property>

<property>
  <name>hive.mr3.container.max.java.heap.fraction</name>
  <value>0.7f</value>
</property>

<property>
  <name>hive.mr3.resource.vcores.divisor</name>
  <value>1</value>
</property>

<property>
  <name>hive.mr3.map.task.memory.mb</name>
  <value>6144</value>
</property>

<property>
  <name>hive.mr3.map.task.vcores</name>
  <value>1</value>
</property>

<property>
  <name>hive.mr3.reduce.task.memory.mb</name>
  <value>6144</value>
</property>

<property>
  <name>hive.mr3.reduce.task.vcores</name>
  <value>1</value>
</property>

<property>
  <name>hive.mr3.all-in-one.containergroup.memory.mb</name>
  <value>110592</value>
</property>

<property>
  <name>hive.mr3.all-in-one.containergroup.vcores</name>
  <value>18</value>
</property>

<property>
  <name>hive.mr3.use.daemon.shufflehandler</name>
  <value>12</value>
  <description>
    Adjust tez.shuffle.max.threads in tez-site.xml (to a non-zero value) if necessary
  </description>
</property>

<property>
  <name>hive.mr3.am.task.max.failed.attempts</name>
  <value>3</value>
</property>

<property>
  <name>hive.mr3.delete.vertex.local.directory</name>
  <value>false</value>
</property>

<property>
  <name>hive.mr3.bucket.mapjoin.estimate.num.nodes</name>
  <value>-1</value>
  <description>
    Set to -1 in order to ask MR3 to get the number of Nodes at runtime
  </description>
</property>

<!-- scheduling 0.10 -->

<property>
  <name>hive.tez.llap.min.reducer.per.executor</name>
  <value>0.2f</value>
</property>

<!-- speculative execution 1.1 -->

<property>
  <name>hive.mr3.am.task.concurrent.run.threshold.percent</name>
  <value>99</value>
</property>

<!-- capacity scheduling when mr3.dag.queue.scheme is set to capacity -->

<property>
  <name>hive.mr3.dag.queue.name</name>
  <value>default</value>
</property>

<property>
  <name>hive.mr3.dag.queue.capacity.specs</name>
  <value>default:0</value>
</property>

<!-- Kubernetes -->

<property>
  <name>hive.mr3.localize.session.jars</name>
  <value>false</value>
</property>

<!--
  If the user chooses to override hive.exec.stagingdir for running such queries as 'analyze table',
  it should be set to a directory (with write permission) in the same file system where target tables reside.
  For example, if target tables reside on S3, hive.exec.stagingdir should point to a directory on S3.
 -->

<!--
  It is okay to use /opt/mr3-run/scratch-dir for hive.exec.scratchdir and hive.downloaded.resources.dir.
 -->
<property>
  <name>hive.exec.scratchdir</name>
  <value>s3://emr-on-eks-rss-021732063925-us-west-2/work-dir/${user.name}</value>
</property>

<property>
  <name>hive.query.results.cache.directory</name>
  <value>s3://emr-on-eks-rss-021732063925-us-west-2/work-dir/_resultscache_</value>
</property>

<property>
  <name>hive.downloaded.resources.dir</name>
  <value>/opt/mr3-run/hive/${hive.session.id}_resources</value>
</property>

<property>
  <name>hive.exec.local.scratchdir</name>
  <value>/opt/mr3-run/scratch-dir</value>
</property>

<property>
  <name>hive.server2.logging.operation.log.location</name>
  <value>/opt/mr3-run/scratch-dir/operation_logs</value>
</property>

<property>
  <name>hive.mr3.dag.additional.credentials.source</name>
  <value></value>
</property>

<!-- Token renewal -->

<property>
  <name>hive.cluster.delegation.token.renew-interval</name>
  <value>1</value>
  <description>
    The unit is days, not milli-seconds.
  </description>
</property>

<!-- Compaction -->

<property>
  <name>hive.mr3.compaction.using.mr3</name>
  <value>true</value>
</property>

<!-- Repl -->

<property>
  <name>hive.distcp.privileged.doAs</name>
  <value>hive</value>
</property>

<property>
  <name>hive.repl.rootdir</name>
  <value>/opt/mr3-run/work-dir</value>
</property>

<!-- Clean JobConf to be passed to Tez -->

<property>
  <name>hive.mr3.config.remove.keys</name>
  <value>hive.query.string</value>
</property>

<!--
  ipc.*: do not remove (e.g., ipc.maximum.data.length)
  mapreduce.job.*: used by MapReduce interfaces
  mapreduce.workflow.*, mapreduce.client.*: not worth removing
  Cf. dfs.balancer.*, dfs.federation.*, dfs.ha*, dfs.qjournal*, dfs.webhdfs*, hadoop.*, mapreduce.application.*, mapreduce.map.*, mapreduce.reduce.*, mapreduce.task.*
  -->
<property>
  <name>hive.mr3.config.remove.prefixes</name>
  <value>atlas.hook.,datanucleus.,ftp.,ha.,javax.,mapreduce.jobhistory.,metastore.,hive.metastore.,nfs.,yarn.</value>
</property>

<!-- Hive 4 -->

<property>
  <name>hive.metastore.runworker.in</name>
  <value>metastore</value>
</property>

<property>
  <name>hive.metastore.warehouse.external.dir</name>
  <value>${hive.warehouse.dir}</value>
</property>

<property>
  <name>hive.acid.direct.insert.enabled</name>
  <value>true</value>
</property>

<property>
  <name>hive.optimize.scan.probedecode</name>
  <value>true</value>
</property>

<property>
  <name>hive.zookeeper.killquery.enable</name>
  <value>false</value>
</property>

<property>
  <name>hive.llap.io.proactive.eviction.enabled</name>
  <value>false</value>
</property>

<!-- S3 -->

<property>
  <name>hive.llap.io.use.fileid.path</name>
  <value>false</value>
  <description>
    In practice, we have hive.llap.io.use.fileid.path = "is HDFS".
    Cf. HIVE-20338 (LLAP: Force synthetic file-id for filesystems which have HDFS protocol impls with POSIX mutation semantics)
  </description>
</property>

<!-- can be set for performance tuning when using S3 -->

<!-- S3 input listing (Cf. mapreduce.input.fileinputformat.list-status.num-threads) -->
<property>
  <name>hive.exec.input.listing.max.threads</name>
  <value>50</value>
</property>

<!-- MSCK (Metastore Check) on S3 -->
<property>
  <name>hive.metastore.fshandler.threads</name>
  <value>30</value>
</property>
<property>
  <name>hive.msck.repair.batch.size</name>
  <value>3000</value>
</property>

<!-- dynamic partition query on S3 -->
<property>
  <name>hive.load.dynamic.partitions.thread</name>
  <value>25</value>
</property>

<!-- with HIVE-21390, for hive.exec.orc.split.strategy=BI -->
<property>
  <name>hive.exec.orc.blob.storage.split.size</name>
  <value>134217728</value>
</property>

<!-- for hive.exec.orc.split.strategy=ETL -->
<property>
  <name>hive.orc.compute.splits.num.threads</name>
  <value>20</value>
</property>

<property>
  <name>hive.orc.splits.include.file.footer</name>
  <value>false</value>
</property>

<!-- Correctness -->

<property>
  <name>hive.optimize.shared.work</name>
  <value>true</value>
</property>

<property>
  <name>hive.optimize.shared.work.extended</name>
  <value>true</value>
</property>

<!-- set to false by default in HIVE-24812 -->
<property>
  <name>hive.optimize.shared.work.semijoin</name>
  <value>false</value>
</property>

<property>
  <name>hive.optimize.shared.work.dppunion</name>
  <value>false</value>
</property>

<property>
  <name>hive.optimize.shared.work.dppunion.merge.eventops</name>
  <value>false</value>
</property>

<property>
  <name>hive.optimize.shared.work.downstream.merge</name>
  <value>false</value>
</property>

<property>
  <name>hive.optimize.shared.work.parallel.edge.support</name>
  <value>false</value>
</property>

<property>
  <name>hive.optimize.shared.work.merge.ts.schema</name>
  <value>false</value>
</property>

<property>
  <name>hive.optimize.cte.materialize.threshold</name>
  <value>-1</value>
</property>

<property>
  <name>hive.tez.bloom.filter.merge.threads</name>
  <value>1</value>
</property>

<property>
  <name>hive.auto.convert.anti.join</name>
  <value>true</value>
</property>

<!-- Iceberg -->

<property>
  <name>iceberg.catalog</name>
  <value>iceberg</value>
</property>

<property>
  <name>iceberg.catalog.iceberg.type</name>
  <value>hive</value>
</property>

<property>
  <name>iceberg.catalog.iceberg.clients</name>
  <value>10</value>
</property>

<property>
  <name>iceberg.catalog.iceberg.uri</name>
  <value>thrift://${hive.metastore.host}:${hive.metastore.port}</value>
</property>

<property>
  <name>iceberg.catalog.iceberg.warehouse</name>
  <value>${hive.warehouse.dir}</value>
</property>

<property>
  <name>write.format.default</name>
  <value>orc</value>
</property>

<property>
  <name>iceberg.mr.split.size</name>
  <value>16777216</value>
</property>

</configuration>
